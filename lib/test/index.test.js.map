{"version":3,"sources":["../../src/test/index.test.js"],"names":["describe","it","ipfsMultiplexer","IpfsMultiplexer","response","get","Array","isArray","to","be","true","length","equal","content","toString","timeout","err","message","skip","add","path","Buffer","from","wrapInDirectory","eql","hash","size","ls","name","type","depth"],"mappings":"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","sourcesContent":["import { expect } from 'chai';\n\nimport IpfsMultiplexer from '../index';\n\ndescribe('Describe IpfsMultiplexer', () => {\n  it('should correctly get a file', async () => {\n    const ipfsMultiplexer = new IpfsMultiplexer();\n    const response = await ipfsMultiplexer.get('QmZtmD2qt6fJot32nabSP3CUjicnypEBz7bHVDhPQt9aAy');\n    expect(Array.isArray(response)).to.be.true;\n    expect(response.length).to.equal(1);\n    expect(response[0].content.toString('utf8')).to.equal('version 1 of my text\\n');\n  });\n\n  it('should throw an error with an invalid file', async () => {\n    const ipfsMultiplexer = new IpfsMultiplexer({\n      timeout: 5000,\n    });\n    try {\n      await ipfsMultiplexer.get('QmZtmD2qt6fJot32nabSP3CUjicnypEBz7bHVDhPQt9aAz');\n    } catch (err) {\n      expect(err.message).to.equal('The requests from all nodes failed');\n    }\n  });\n\n  it.skip('should correctly save array of files and wrap them in directory', async () => {\n    const ipfsMultiplexer = new IpfsMultiplexer({\n      timeout: 5000,\n    });\n    const response = await ipfsMultiplexer.add(\n      [\n        { path: 'file-1', content: Buffer.from('hello 1') },\n        { path: 'file-2', content: Buffer.from('hello 2') },\n        { path: 'file-3', content: Buffer.from('hello 3') },\n      ],\n      { wrapInDirectory: true }\n    );\n    expect(response).to.eql([\n      {\n        path: 'file-1',\n        hash: 'QmYU2WZfhRAhz7z5xekJkAZWznK2k27uyiH7KZct6VdCbe',\n        size: 15,\n      },\n      {\n        path: 'file-2',\n        hash: 'QmYNmWVijaKZAbse8vJDrUiBk6CrksRUHepy2e14DaL4fW',\n        size: 15,\n      },\n      {\n        path: 'file-3',\n        hash: 'QmT6Y6kJSpMs8hG9tD685sFtLegkddXxydL9tzZuyV6Dc3',\n        size: 15,\n      },\n      {\n        path: '',\n        hash: 'QmSTaWhi6xW2L1mUprRvtw22UXFCPyzZx5d1cmwMBa1bu4',\n        size: 193,\n      },\n    ]);\n  });\n\n  it('should correctly list files in directory', async () => {\n    const ipfsMultiplexer = new IpfsMultiplexer({\n      timeout: 5000,\n    });\n    const response = await ipfsMultiplexer.ls('QmSTaWhi6xW2L1mUprRvtw22UXFCPyzZx5d1cmwMBa1bu4');\n    expect(response).to.eql([\n      {\n        name: 'file-1',\n        path: 'QmSTaWhi6xW2L1mUprRvtw22UXFCPyzZx5d1cmwMBa1bu4/file-1',\n        size: 7,\n        hash: 'QmYU2WZfhRAhz7z5xekJkAZWznK2k27uyiH7KZct6VdCbe',\n        type: 'file',\n        depth: 1,\n      },\n      {\n        name: 'file-2',\n        path: 'QmSTaWhi6xW2L1mUprRvtw22UXFCPyzZx5d1cmwMBa1bu4/file-2',\n        size: 7,\n        hash: 'QmYNmWVijaKZAbse8vJDrUiBk6CrksRUHepy2e14DaL4fW',\n        type: 'file',\n        depth: 1,\n      },\n      {\n        name: 'file-3',\n        path: 'QmSTaWhi6xW2L1mUprRvtw22UXFCPyzZx5d1cmwMBa1bu4/file-3',\n        size: 7,\n        hash: 'QmT6Y6kJSpMs8hG9tD685sFtLegkddXxydL9tzZuyV6Dc3',\n        type: 'file',\n        depth: 1,\n      },\n    ]);\n  });\n});\n"],"file":"index.test.js"}