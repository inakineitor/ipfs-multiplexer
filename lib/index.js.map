{"version":3,"sources":["../src/index.js"],"names":["IpfsMultiplexer","constructor","options","timeout","ipfsClients","gateways","map","gateway","addGateway","push","createFunction","method","optionsIndex","args","methodSelector","split","abortController","AbortController","signal","undefined","Promise","resolve","reject","rejected","forEach","ipfsClient","then","response","abort","catch","length","Error","Object","entries","methods","base","prototype","functionName","pop","selector"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;;;AAEA,MAAMA,eAAN,CAAsB;AACpBC,EAAAA,WAAW,CAACC,OAAO,GAAG,EAAX,EAAe;AACxB,SAAKA,OAAL,GAAe;AACbC,MAAAA,OAAO,EAAE,KADI;AAEb,SAAGD;AAFU,KAAf,CADwB,CAKxB;;AACA,SAAKE,WAAL,GAAmBC,kBAASC,GAAT,CAAaC,OAAO,IACrC,6BAAiB,EACf,GAAGA,OADY;AAEf,SAAG,KAAKL;AAFO,KAAjB,CADiB,CAAnB;AAMD;;AAEDM,EAAAA,UAAU,CAACD,OAAD,EAAU;AAClB;AACA,SAAKH,WAAL,CAAiBK,IAAjB,CACE,6BAAiB,EACf,GAAG,KAAKP,OADO;AAEf,SAAGK;AAFY,KAAjB,CADF;AAMD;;AAvBmB;;AA0BtB,MAAMG,cAAc,GAAG,CAACC,MAAD,EAASC,YAAT,KAA0B;AAC/C,SAAO,UAAS,GAAGC,IAAZ,EAAkB;AACvB,UAAM;AAAET,MAAAA;AAAF,QAAkB,IAAxB;AACA,UAAMU,cAAc,GAAGH,MAAM,CAACI,KAAP,CAAa,GAAb,CAAvB,CAFuB,CAEmB;;AAC1C,UAAMC,eAAe,GAAG,IAAIC,eAAJ,EAAxB;AACA,QAAIL,YAAY,KAAK,IAAjB,IAAyBC,IAAI,CAACD,YAAD,CAAJ,CAAmBM,MAAnB,KAA8BC,SAA3D,EACE;AACAN,MAAAA,IAAI,CAACD,YAAD,CAAJ,CAAmBM,MAAnB,GAA4BF,eAAe,CAACE,MAA5C;AACF,WAAO,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAIC,QAAQ,GAAG,CAAf;AACAnB,MAAAA,WAAW,CAACoB,OAAZ,CAAoBC,UAAU,IAAI;AAChC,+BACEA,UADF,EAEEX,cAFF,EAGE,GAAGD,IAHL,EAIGa,IAJH,CAIQC,QAAQ,IAAI;AAChBX,UAAAA,eAAe,CAACY,KAAhB;AACAP,UAAAA,OAAO,CAACM,QAAD,CAAP;AACD,SAPH,EAQGE,KARH,CAQS,MAAM;AACXN,UAAAA,QAAQ,IAAI,CAAZ;AACA,cAAIA,QAAQ,KAAKnB,WAAW,CAAC0B,MAA7B,EACER,MAAM,CAAC,IAAIS,KAAJ,CAAU,oCAAV,CAAD,CAAN;AACH,SAZH;AAaD,OAdD;AAeD,KAjBM,CAAP;AAkBD,GAzBD;AA0BD,CA3BD;;AA6BAC,MAAM,CAACC,OAAP,CAAeC,0BAAf,EAAwBV,OAAxB,CAAgC,CAAC,CAACb,MAAD,EAASC,YAAT,CAAD,KAA4B;AAC1D,QAAME,cAAc,GAAGH,MAAM,CAACI,KAAP,CAAa,GAAb,CAAvB;AACA,MAAIoB,IAAI,GAAGnC,eAAe,CAACoC,SAA3B;AACA,QAAMC,YAAY,GAAGvB,cAAc,CAACwB,GAAf,EAArB;AACAxB,EAAAA,cAAc,CAACU,OAAf,CAAuBe,QAAQ,IAAI;AACjCJ,IAAAA,IAAI,CAACI,QAAD,CAAJ,GAAiBJ,IAAI,CAACI,QAAD,CAAJ,IAAkB,EAAnC;AACAJ,IAAAA,IAAI,GAAGA,IAAI,CAACI,QAAD,CAAX;AACD,GAHD;AAIAJ,EAAAA,IAAI,CAACE,YAAD,CAAJ,GAAqB3B,cAAc,CAACC,MAAD,EAASC,YAAT,CAAnC;AACD,CATD;eAWeZ,e,EAEf;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import createIpfsClient from 'ipfs-http-client';\n\nimport gateways from './gateways';\nimport methods from './ipfs-client-methods';\nimport getFrom from './selector';\n\nclass IpfsMultiplexer {\n  constructor(options = {}) {\n    this.options = {\n      timeout: 10000,\n      ...options,\n    };\n    // This spread order will ensure that the options argument will override the gateway's options\n    this.ipfsClients = gateways.map(gateway =>\n      createIpfsClient({\n        ...gateway,\n        ...this.options,\n      })\n    );\n  }\n\n  addGateway(gateway) {\n    // This spread order will ensure that the function argument will override the multiplexer options\n    this.ipfsClients.push(\n      createIpfsClient({\n        ...this.options,\n        ...gateway,\n      })\n    );\n  }\n}\n\nconst createFunction = (method, optionsIndex) => {\n  return function(...args) {\n    const { ipfsClients } = this;\n    const methodSelector = method.split('.'); // For some memory management reason, an array cannot be passed into here it has to be calculated on runtime\n    const abortController = new AbortController();\n    if (optionsIndex !== null && args[optionsIndex].signal === undefined)\n      // eslint-disable-next-line no-param-reassign\n      args[optionsIndex].signal = abortController.signal;\n    return new Promise((resolve, reject) => {\n      let rejected = 0;\n      ipfsClients.forEach(ipfsClient => {\n        getFrom(\n          ipfsClient,\n          methodSelector\n        )(...args)\n          .then(response => {\n            abortController.abort();\n            resolve(response);\n          })\n          .catch(() => {\n            rejected += 1;\n            if (rejected === ipfsClients.length)\n              reject(new Error('The requests from all nodes failed'));\n          });\n      });\n    });\n  };\n};\n\nObject.entries(methods).forEach(([method, optionsIndex]) => {\n  const methodSelector = method.split('.');\n  let base = IpfsMultiplexer.prototype;\n  const functionName = methodSelector.pop();\n  methodSelector.forEach(selector => {\n    base[selector] = base[selector] || {};\n    base = base[selector];\n  });\n  base[functionName] = createFunction(method, optionsIndex);\n});\n\nexport default IpfsMultiplexer;\n\n// const ipfsMultiplexer = new IpfsMultiplexer();\n\n// const date = new Date();\n// ipfsMultiplexer\n//   .get('Qmaisz6NMhDB51cCvNWa1GMS7LU1pAxdF4Ld6Ft9kZEP2a')\n//   .then(() => console.log(`Time taken: ${new Date() - date}ms`))\n//   .catch(console.error);\n"],"file":"index.js"}