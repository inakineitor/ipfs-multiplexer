{"version":3,"sources":["../src/index.js"],"names":["IpfsMultiplexer","constructor","options","timeout","ipfsClients","gateways","map","gateway","addGateway","push","createFunction","method","optionsIndex","args","methodSelector","split","abortController","AbortController","signal","Promise","resolve","reject","rejected","forEach","ipfsClient","then","response","abort","catch","length","Error","Object","entries","methods","base","prototype","functionName","pop","selector"],"mappings":"uaAMA,KAAMA,CAAAA,eAAgB,CACpBC,WAAW,CAACC,CAAO,CAAG,EAAX,CAAe,CAKxB;AAJA,KAAKA,OAAL,CAAe,CACbC,OAAO,CAAE,GADI,CAEb,GAAGD,CAFU,CADS,CAMxB,KAAKE,WAAL,CAAmBC,kBAASC,GAAT,CAAaC,CAAO,EACrC,4BAAiB,CACf,GAAGA,CADY,CAEf,GAAG,KAAKL,OAFO,CAAjB,CADiB,CAMpB,CAEDM,UAAU,CAACD,CAAD,CAAU,CAClB;AACA,KAAKH,WAAL,CAAiBK,IAAjB,CACE,4BAAiB,CACf,GAAG,KAAKP,OADO,CAEf,GAAGK,CAFY,CAAjB,CADF,CAMD,CAvBmB,CA0BtB,KAAMG,CAAAA,cAAc,CAAG,CAACC,CAAD,CAASC,CAAT,GACd,SAAS,GAAGC,CAAZ,CAAkB,MACjB,CAAET,WAAW,CAAXA,CAAF,EAAkB,IADD,CAEjBU,CAAc,CAAGH,CAAM,CAACI,KAAP,CAAa,GAAb,CAFA,CAGjBC,CAAe,CAAG,GAAIC,CAAAA,eAHL,CAOvB,MAHqB,KAAjB,GAAAL,CAAY,EAAa,SAAAC,CAAI,CAACD,CAAD,CAAJ,CAAmBM,MAGhD,GAFE;AACAL,CAAI,CAACD,CAAD,CAAJ,CAAmBM,MAAnB,CAA4BF,CAAe,CAACE,MAC9C,EAAO,GAAIC,CAAAA,OAAJ,CAAY,CAACC,CAAD,CAAUC,CAAV,GAAqB,CACtC,GAAIC,CAAAA,CAAQ,CAAG,CAAf,CACAlB,CAAW,CAACmB,OAAZ,CAAoBC,CAAU,EAAI,CAChC,sBACEA,CADF,CAEEV,CAFF,EAGE,GAAGD,CAHL,EAIGY,IAJH,CAIQC,CAAQ,EAAI,CAChBV,CAAe,CAACW,KAAhB,EADgB,CAEhBP,CAAO,CAACM,CAAD,CACR,CAPH,EAQGE,KARH,CAQS,IAAM,CACXN,CAAQ,EAAI,CADD,CAEPA,CAAQ,GAAKlB,CAAW,CAACyB,MAFlB,EAGTR,CAAM,CAAC,GAAIS,CAAAA,KAAJ,CAAU,oCAAV,CAAD,CACT,CAZH,CAaD,CAdD,CAeD,CAjBM,CAkBR,CA1BH,CA6BAC,MAAM,CAACC,OAAP,CAAeC,0BAAf,EAAwBV,OAAxB,CAAgC,CAAC,CAACZ,CAAD,CAASC,CAAT,CAAD,GAA4B,CAC1D,KAAME,CAAAA,CAAc,CAAGH,CAAM,CAACI,KAAP,CAAa,GAAb,CAAvB,CACA,GAAImB,CAAAA,CAAI,CAAGlC,eAAe,CAACmC,SAA3B,CACA,KAAMC,CAAAA,CAAY,CAAGtB,CAAc,CAACuB,GAAf,EAArB,CACAvB,CAAc,CAACS,OAAf,CAAuBe,CAAQ,EAAI,CACjCJ,CAAI,CAACI,CAAD,CAAJ,CAAiBJ,CAAI,CAACI,CAAD,CAAJ,EAAkB,EADF,CAEjCJ,CAAI,CAAGA,CAAI,CAACI,CAAD,CACZ,CAHD,CAJ0D,CAQ1DJ,CAAI,CAACE,CAAD,CAAJ,CAAqB1B,cAAc,CAACC,CAAD,CAASC,CAAT,CACpC,CATD,C,cAWeZ,e,CAEf;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import createIpfsClient from 'ipfs-http-client';\n\nimport gateways from './gateways';\nimport methods from './ipfs-client-methods';\nimport getFrom from './selector';\n\nclass IpfsMultiplexer {\n  constructor(options = {}) {\n    this.options = {\n      timeout: 10000,\n      ...options,\n    };\n    // This spread order will ensure that the options argument will override the gateway's options\n    this.ipfsClients = gateways.map(gateway =>\n      createIpfsClient({\n        ...gateway,\n        ...this.options,\n      })\n    );\n  }\n\n  addGateway(gateway) {\n    // This spread order will ensure that the function argument will override the multiplexer options\n    this.ipfsClients.push(\n      createIpfsClient({\n        ...this.options,\n        ...gateway,\n      })\n    );\n  }\n}\n\nconst createFunction = (method, optionsIndex) => {\n  return function(...args) {\n    const { ipfsClients } = this;\n    const methodSelector = method.split('.'); // For some memory management reason, an array cannot be passed into here it has to be calculated on runtime\n    const abortController = new AbortController();\n    if (optionsIndex !== null && args[optionsIndex].signal === undefined)\n      // eslint-disable-next-line no-param-reassign\n      args[optionsIndex].signal = abortController.signal;\n    return new Promise((resolve, reject) => {\n      let rejected = 0;\n      ipfsClients.forEach(ipfsClient => {\n        getFrom(\n          ipfsClient,\n          methodSelector\n        )(...args)\n          .then(response => {\n            abortController.abort();\n            resolve(response);\n          })\n          .catch(() => {\n            rejected += 1;\n            if (rejected === ipfsClients.length)\n              reject(new Error('The requests from all nodes failed'));\n          });\n      });\n    });\n  };\n};\n\nObject.entries(methods).forEach(([method, optionsIndex]) => {\n  const methodSelector = method.split('.');\n  let base = IpfsMultiplexer.prototype;\n  const functionName = methodSelector.pop();\n  methodSelector.forEach(selector => {\n    base[selector] = base[selector] || {};\n    base = base[selector];\n  });\n  base[functionName] = createFunction(method, optionsIndex);\n});\n\nexport default IpfsMultiplexer;\n\n// const ipfsMultiplexer = new IpfsMultiplexer();\n\n// const date = new Date();\n// ipfsMultiplexer\n//   .get('Qmaisz6NMhDB51cCvNWa1GMS7LU1pAxdF4Ld6Ft9kZEP2a')\n//   .then(() => console.log(`Time taken: ${new Date() - date}ms`))\n//   .catch(console.error);\n"],"file":"index.js"}